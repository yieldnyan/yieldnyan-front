{"version":3,"sources":["utils/erc20.ts","hooks/useTokenBalance.ts","hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/CakeStats.tsx","components/layout/ContainerHome.tsx","components/layout/PageHome.tsx","views/Home/Home.tsx"],"names":["getContract","provider","address","Web3","eth","Contract","erc20","getAllowance","lpContract","masterChefContract","account","a","methods","allowance","options","call","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","balance","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","cakeContract","cakeABI","getCakeAddress","supply","BigNumber","fetchTotalSupply","useBurnedBalance","setBalance","useWallet","ethereum","res","fetchBalance","useTokenBalance","fastRefresh","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","fetchBalances","useAllEarnings","balances","fetchAllBalances","CardValue","value","decimals","fontSize","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","color","CakeHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","div","pow","toNumber","style","lineHeight","CakeWalletBalance","cakeBalance","getBalanceNumber","StyledFarmStakingCard","styled","Card","Block","CardImage","img","Label","theme","colors","primary","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","position","left","top","src","alt","width","size","mb","right","zIndex","height","id","disabled","length","onClick","fullWidth","UnlockButton","StyledTotalValueLockedCard","TotalValueLockedCard","farmsLP","useFarms","cakePrice","usePriceCakeBusd","bnbPrice","usePriceBnbBusd","tvl","i","lpTotalInQuoteToken","quoteTokenSymbol","QuoteToken","BNB","plus","times","NYAN","total","toLocaleString","StyledCakeStats","Row","CakeStats","burnedBalance","cakeSupply","ContainerHome","mediaQueries","sm","PageHome","Container","lg","Hero","Cards","BaseLayout","Home","Page","as","FarmStakingCard"],"mappings":"uRAMaA,EAAc,SAACC,EAAwBC,GAGlD,OADiB,IADJ,IAAIC,IAAKF,GACIG,IAAIC,UAAUC,EAA8BJ,IAI3DK,EAAY,uCAAG,WAC1BC,EACAC,EACAC,GAH0B,eAAAC,EAAA,+EAMQH,EAAWI,QAAQC,UAAUH,EAASD,EAAmBK,QAAQZ,SAASa,OANlF,cAMlBF,EANkB,yBAOjBA,GAPiB,yDASjB,KATiB,yDAAH,0DAaZG,EAAe,uCAAG,WAC7Bf,EACAgB,EACAC,GAH6B,iBAAAP,EAAA,6DAKvBQ,EAAWnB,EAAYC,EAAUgB,GALV,kBAOGE,EAASP,QAAQQ,UAAUF,GAAaH,OAP3C,cAOrBM,EAPqB,yBAQpBA,GARoB,yDAUpB,KAVoB,yDAAH,2D,kNCIfC,EAAiB,WAAO,IAC3BC,EAAgBC,cAAhBD,YAD0B,EAEIE,qBAFJ,mBAE3BC,EAF2B,KAEdC,EAFc,KAclC,OAVAC,qBAAU,WAAM,4CACd,8BAAAjB,EAAA,6DACQkB,EAAe7B,YAAY8B,EAASC,eAD5C,SAEuBF,EAAajB,QAAQc,cAAcX,OAF1D,OAEQiB,EAFR,OAGEL,EAAe,IAAIM,IAAUD,IAH/B,4CADc,uBAAC,WAAD,wBAOdE,KACC,CAACX,IAEGG,GAGIS,EAAmB,SAAClB,GAA0B,IAAD,EAC1BQ,mBAAS,IAAIQ,IAAU,IADG,mBACjDZ,EADiD,KACxCe,EADwC,OAEeC,cAA/D3B,EAFgD,EAEhDA,QAAS4B,EAFuC,EAEvCA,SACTf,EAAgBC,cAAhBD,YAaR,OAXAK,qBAAU,WAMJlB,GAAW4B,GALG,uCAAG,4BAAA3B,EAAA,sEACDK,YAAgBsB,EAAUrB,EAAc,8CADvC,OACbsB,EADa,OAEnBH,EAAW,IAAIH,IAAUM,IAFN,2CAAH,oDAMhBC,KAED,CAAC9B,EAAS4B,EAAUrB,EAAcM,IAE9BF,GAGMoB,IAvDS,SAACxB,GAA0B,IAAD,EAClBQ,mBAAS,IAAIQ,IAAU,IADL,mBACzCZ,EADyC,KAChCe,EADgC,OAEuBC,cAA/D3B,EAFwC,EAExCA,QAAS4B,EAF+B,EAE/BA,SACTI,EAAgBlB,cAAhBkB,YAaR,OAXAd,qBAAU,WAMJlB,GAAW4B,GALG,uCAAG,4BAAA3B,EAAA,sEACDK,YAAgBsB,EAAUrB,EAAcP,GADvC,OACb6B,EADa,OAEnBH,EAAW,IAAIH,IAAUM,IAFN,2CAAH,oDAMhBC,KAED,CAAC9B,EAAS4B,EAAUrB,EAAcyB,IAE9BrB,I,gRCeMsB,EA3Ba,WAAO,IAAD,EACkBlB,mBAA4B,IAD9C,mBACzBmB,EADyB,KACNC,EADM,KAExBnC,EAAY2B,cAAZ3B,QACAgC,EAAgBlB,cAAhBkB,YAqBR,OAnBAd,qBAAU,WAcJlB,GAbe,uCAAG,gCAAAC,EAAA,6DACdmC,EAAQC,IAAYC,KAAI,SAACC,GAAD,MAAW,CACvC/C,QAASgD,cACTC,KAAM,cACNC,OAAQ,CAACH,EAAKI,IAAK3C,OAJD,SAOK4C,YAAUC,EAAeT,GAP9B,OAOdU,EAPc,OAQdC,EAAUV,IAAYC,KAAI,SAACC,EAAMS,GAAP,mBAAC,eAAsBT,GAAvB,IAA6B5B,QAAS,IAAIY,IAAUuB,EAAWE,SAE/Fb,EAAqBY,GAVD,2CAAH,oDAcjBE,KAED,CAACjD,EAASgC,IAENE,G,SCJMgB,EA1BQ,WAAO,IAAD,EACInC,mBAAS,IADb,mBACpBoC,EADoB,KACVzB,EADU,KAEnB1B,EAAiC2B,cAAjC3B,QACAgC,EAAgBlB,cAAhBkB,YAoBR,OAlBAd,qBAAU,WAaJlB,GAZkB,uCAAG,8BAAAC,EAAA,6DACjBmC,EAAQC,IAAYC,KAAI,SAACC,GAAD,MAAW,CACvC/C,QAASgD,cACTC,KAAM,cACNC,OAAQ,CAACH,EAAKI,IAAK3C,OAJE,SAOL4C,YAAUC,EAAeT,GAPpB,OAOjBP,EAPiB,OASvBH,EAAWG,GATY,2CAAH,oDAapBuB,KAED,CAACpD,EAASgC,IAENmB,G,gBCGME,EAxB6B,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,SAAkC,IAAxBC,gBAAwB,MAAb,OAAa,IAC1DC,qBAAW,CACrCC,MAAO,EACPC,IAAKL,EACLM,SAAU,EACVC,UAAW,IACXN,cAEeO,IAAbP,EAAyBA,EAAWD,EAAQ,EAAI,EAAIA,EAAQ,IAAM,EAAI,IAPlES,EAD8E,EAC9EA,QAASC,EADqE,EACrEA,OAUXC,EAAcC,iBAAOF,GAM3B,OAJA9C,qBAAU,WACR+C,EAAYE,QAAQb,KACnB,CAACA,EAAOW,IAGT,cAAC,IAAD,CAAMG,MAAI,EAACZ,SAAUA,EAAUa,MAAM,UAArC,SACGN,KCFQO,EAnBY,WACzB,IAAMC,EAAkBC,cAChBxE,EAAY2B,cAAZ3B,QAEFyE,EADcvB,IACYwB,QAAO,SAACC,EAAOC,GAC7C,OAAOD,EAAQ,IAAIpD,IAAUqD,GAASC,IAAI,IAAItD,IAAU,IAAIuD,IAAI,KAAKC,aACpE,GAEH,OAAK/E,EAQE,cAAC,EAAD,CAAWsD,MAAOmB,IANrB,cAAC,IAAD,CAAMJ,MAAM,OAAOW,MAAO,CAAEC,WAAY,QAAxC,SACGV,EAAgB,IAAK,a,iBCMfW,EAhBW,WACxB,IAAMX,EAAkBC,cAClBW,EAAcpD,YAAgBV,eAGpC,OAFoBM,cAAZ3B,QAUD,cAAC,EAAD,CAAWsD,MAAO8B,YAAiBD,GAAc3B,SAAS,SAN7D,cAAC,IAAD,CAAMa,MAAM,OAAOW,MAAO,CAAEC,WAAY,QAAxC,SACGV,EAAgB,IAAK,aCNxBc,EAAwBC,YAAOC,IAAPD,CAAH,mKAQrBE,EAAQF,IAAOT,IAAV,oEAKLY,EAAYH,IAAOI,IAAV,yDAKTC,EAAQL,IAAOT,IAAV,iGACA,qBAAGe,MAAkBC,OAAOC,WAKjCC,EAAUT,IAAOT,IAAV,iDA6DEmB,EAzDW,WAAO,IAAD,EACIjF,oBAAS,GADb,mBACvBkF,EADuB,KACZC,EADY,KAEtBlG,EAAY2B,cAAZ3B,QACFuE,EAAkBC,cAElB2B,EADmBlE,IACkBmE,QAAO,SAACC,GAAD,OAAiBA,EAAY1F,QAAQoE,WAAa,KAE5FuB,EAAaC,YAAcJ,EAAkB7D,KAAI,SAACkE,GAAD,OAAqBA,EAAgB7D,QAAtF2D,SAEFG,EAAkBC,sBAAW,sBAAC,sBAAAzG,EAAA,6DAClCiG,GAAa,GADqB,kBAG1BI,IAH0B,6EAOhCJ,GAAa,GAPmB,0EASjC,CAACI,IAEJ,OACE,eAACjB,EAAD,WACG,cAACI,EAAD,CAAYT,MAAO,CAAC2B,SAAS,WAAWC,KAAK,QAAQC,IAAI,UAAWC,IAAI,uBAAuBC,IAAI,YAAYC,MAAO,MACvH,eAAC,IAAD,WACE,cAAC,IAAD,CAASC,KAAK,MAAMC,GAAG,OAAvB,SACG3C,EAAgB,IAAK,qBAIxB,eAACiB,EAAD,WACE,cAAC,EAAD,IACA,cAACG,EAAD,UAAQpB,EAAgB,IAAK,qBAC7B,cAAC,EAAD,IACA,cAACoB,EAAD,UAAQpB,EAAgB,IAAK,uBAE/B,cAACkB,EAAD,CAAWT,MAAO,CAAC2B,SAAS,WAAWQ,MAAM,SAASN,IAAI,QAAQO,OAAO,QAASN,IAAI,sBAAsBC,IAAI,YAAYC,MAAO,IAAKK,OAAQ,MAChJ,cAACtB,EAAD,UACG/F,EACC,cAAC,IAAD,CACEsH,GAAG,cACHC,SAAUpB,EAAkBqB,QAAU,GAAKvB,EAC3CwB,QAAShB,EACTiB,WAAS,EAJX,SAMGzB,EACG1B,EAAgB,IAAK,mBACrBA,EAAgB,IAAD,uBAAsB4B,EAAkBqB,OAAxC,QAGrB,cAACG,EAAA,EAAD,CAAcD,WAAS,a,gBChF7BE,GAA6BtC,YAAOC,IAAPD,CAAH,sGA8CjBuC,GAvCc,WAO3B,IANA,IAAMtD,EAAkBC,cAClBsD,EAAUC,cACVC,EAAYC,cACZC,EAAWC,cAEbC,EAAM,IAAI7G,IAAU,GACf8G,EAAI,EAAGA,EAAIP,EAAQN,OAAQa,IAAK,CACvC,IAAM9F,EAAOuF,EAAQO,GAChB9F,EAAK+F,sBAGRF,EADS7F,EAAKgG,mBAAqBC,IAAWC,IACxCL,EAAIM,KAAK,IAAInH,IAAUgB,EAAK+F,qBAAqBK,MAAMT,IACpD3F,EAAKgG,mBAAqBC,IAAWI,KACxCR,EAAIM,KAAKV,EAAUW,MAAMpG,EAAK+F,sBAE9BF,EAAIM,KAAKnG,EAAK+F,sBAGxB,IAAMO,EAAST,EAAIrD,WAAY+D,iBAC/B,OACE,eAAClB,GAAD,WACE,cAAC,IAAD,CAASX,KAAK,MAAMC,GAAG,OAAvB,SACG3C,EAAgB,IAAK,8BAEvBsE,EACC,qCACE,cAAC,IAAD,CAAS5B,KAAK,KAAK5C,MAAM,UAAzB,oBAAwCwE,KACxC,cAAC,IAAD,CAAMxE,MAAM,OAAZ,SAAoBE,EAAgB,IAAK,wCAGzC,mCACE,cAAC,IAAD,CAAU8C,OAAQ,WCrCxB0B,GAAkBzD,YAAOC,IAAPD,CAAH,oKAQf0D,GAAM1D,IAAOT,IAAV,oJAOHY,GAAYH,IAAOI,IAAV,2CAoCAuD,GAjCG,WAChB,IAAM1E,EAAkBC,cAClBxD,EAAcJ,cACdsI,EAAgBzH,YAAiBJ,eACjC8H,EAAanI,EAAcoE,YAAiBpE,GAAeoE,YAAiB8D,GAAiB,EAEnG,OACE,eAACH,GAAD,WACE,cAAC,GAAD,CAAY/D,MAAO,CAAC2B,SAAS,WAAWC,KAAK,OAAOC,IAAI,SAAUC,IAAI,oBAAoBC,IAAI,YAAYC,MAAO,GAAIK,OAAQ,MAC5H,cAAC,GAAD,CAAYrC,MAAO,CAAC2B,SAAS,WAAWQ,MAAM,OAAON,IAAI,UAAWC,IAAI,oBAAoBC,IAAI,YAAYC,MAAO,IAAKK,OAAQ,MACjI,eAAC,IAAD,WACE,cAAC,IAAD,CAASJ,KAAK,MAAMC,GAAG,OAAvB,SACG3C,EAAgB,IAAK,iBAExB,eAACyE,GAAD,WACE,cAAC,IAAD,CAAMxF,SAAS,OAAf,SAAuBe,EAAgB,IAAK,uBAC3C4E,GAAc,cAAC,EAAD,CAAW3F,SAAS,OAAOF,MAAO6F,OAEnD,eAACH,GAAD,WACE,cAAC,IAAD,CAAMxF,SAAS,OAAf,SAAuBe,EAAgB,IAAK,uBAC5C,cAAC,EAAD,CAAWf,SAAS,OAAOF,MAAO8B,YAAiB8D,QAErD,eAACF,GAAD,WACE,cAAC,IAAD,CAAMxF,SAAS,OAAf,SAAuBe,EAAgB,IAAK,oBAC5C,cAAC,EAAD,CAAWf,SAAS,OAAOD,SAAU,EAAGD,MAAO,UAGnD,cAAC,GAAD,QCzCS8F,GAZO9D,IAAOT,IAAV,mMAMf,qBAAGe,MAAkByD,aAAaC,MCWvBC,GAhBEjE,YAAOkE,GAAPlE,CAAH,oPAKV,qBAAGM,MAAkByD,aAAaC,MAKlC,qBAAG1D,MAAkByD,aAAaI,MCJhCC,GAAOpE,IAAOT,IAAV,qPASN,qBAAGe,MAAkByD,aAAaI,MAMhCE,GAAQrE,YAAOsE,IAAPtE,CAAH,6SAUP,qBAAGM,MAAkByD,aAAaC,MAMlC,qBAAG1D,MAAkByD,aAAaI,MAmCvBI,GA5BQ,WACrB,IAAMtF,EAAkBC,cAExB,OACE,cAAC,GAAD,UACA,eAACsF,EAAA,EAAD,WACE,eAACJ,GAAD,WACE,cAAC,IAAD,CAASK,GAAG,KAAK9C,KAAK,KAAKC,GAAG,OAAO7C,MAAM,YAA3C,SACGE,EAAgB,IAAK,eAExB,cAAC,IAAD,UAAOA,EAAgB,IAAK,oEAE9B,8BACE,eAACoF,GAAD,WACE,cAACK,EAAD,IAEA,cAAC,GAAD","file":"static/js/13.fe4b3042.chunk.js","sourcesContent":["import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, '0x000000000000000000000000000000000000dEaD')\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from 'yieldnyan-uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px' }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize} color=\"primary\">\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from 'yieldnyan-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = () => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n\n  if (!account) {\n    return (\n      <Text color=\"text\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from 'yieldnyan-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = () => {\n  const TranslateString = useI18n()\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"text\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={getBalanceNumber(cakeBalance)} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from 'yieldnyan-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\nmargin-top:140px;\noverflow: visible;\n  padding: 10px;\n  box-shadow: -8px 12px 18px 0 rgba(25, 42, 70, 0.13);\n  min-height: 376px;\n`\n\nconst Block = styled.div`\nmargin-top: 70px;\nposition: absolute;\n`\n\nconst CardImage = styled.img`\nfloat: right;\nz-index:-99;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.primary};\n  font-size: 14px;\n  white-space: nowrap!important;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n       <CardImage  style={{position:\"absolute\",left:\"-10px\",top:\"-180px\"}} src=\"/images/cats_one.png\" alt=\"cake logo\" width={314}  />\n      <CardBody>\n        <Heading size=\"llg\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n       \n\n        <Block >\n          <CakeHarvestBalance />\n          <Label>{TranslateString(544, 'NYAN to Harvest')}</Label>\n          <CakeWalletBalance />\n          <Label>{TranslateString(546, 'NYAN in Wallet')}</Label>\n        </Block>\n        <CardImage style={{position:\"relative\",right:\"-100px\",top:\"-40px\",zIndex:\"auto\"}} src=\"/images/cat_two.png\" alt=\"cake logo\" width={280} height={300} />\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting NYAN')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from 'yieldnyan-uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport { QuoteToken } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  padding: 24px;\n  align-items: center;\n  flex: 1;\n  box-shadow:none;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n\n  let tvl = new BigNumber(0)\n  for (let i = 0; i < farmsLP.length; i++) {\n    const farm = farmsLP[i]\n    if (!farm.lpTotalInQuoteToken) {\n      //\n    } else if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      tvl = tvl.plus(new BigNumber(farm.lpTotalInQuoteToken).times(bnbPrice))\n    } else if (farm.quoteTokenSymbol === QuoteToken.NYAN) {\n      tvl = tvl.plus(cakePrice.times(farm.lpTotalInQuoteToken))\n    } else {\n      tvl = tvl.plus(farm.lpTotalInQuoteToken)\n    }\n  }\n  const total = (tvl.toNumber()).toLocaleString()\n  return (\n    <StyledTotalValueLockedCard>\n      <Heading size=\"llg\" mb=\"24px\">\n        {TranslateString(999, 'Total Value Locked (TVL)')}\n      </Heading>\n      {total ? (\n        <>\n          <Heading size=\"xl\" color=\"primary\">{`$${total}`}</Heading>\n          <Text color=\"text\">{TranslateString(999, 'Across all LPs and Catnip Pools')}</Text>\n        </>\n      ) : (\n          <>\n            <Skeleton height={66} />\n          </>\n        )}\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from 'yieldnyan-uikit'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport TotalValueLockedCard from './TotalValueLockedCard'\n\nconst StyledCakeStats = styled(Card)`\nmargin-top:140px;\nmargin-left: auto;\nmargin-right: auto;\noverflow: visible;\n  box-shadow: -8px 12px 18px 0 rgba(25, 42, 70, 0.13);\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\nconst CardImage = styled.img`\nfloat: right;\n`\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - getBalanceNumber(burnedBalance) : 0\n\n  return (\n    <StyledCakeStats>\n      <CardImage  style={{position:\"absolute\",left:\"30px\",top:\"-95px\"}} src=\"/images/catt1.png\" alt=\"cake logo\" width={64} height={108}  />\n       <CardImage  style={{position:\"absolute\",right:\"30px\",top:\"-170px\"}} src=\"/images/catt2.png\" alt=\"cake logo\" width={141} height={206}  />\n      <CardBody>\n        <Heading size=\"llg\" mb=\"24px\">\n          {TranslateString(534, 'Token Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total NYAN Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total NYAN Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New NYAN/block')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={1} />\n        </Row>\n      </CardBody>\n      <TotalValueLockedCard />\n\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import styled from 'styled-components'\r\n\r\nconst ContainerHome = styled.div`\r\nbackground: url('/images/patty1.png') #ffffff;\r\nz-index:0;\r\nposition:relative;\r\n  max-width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 24px;\r\n    padding-right: 24px;\r\n  }\r\n`\r\n\r\nexport default ContainerHome\r\n","import styled from 'styled-components'\r\nimport Container from './ContainerHome'\r\n\r\nconst PageHome = styled(Container)`\r\n  min-height: calc(100vh - 64px);\r\n  padding-top: 16px;\r\n  padding-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-top: 24px;\r\n    padding-bottom: 24px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding-top: 32px;\r\n    padding-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default PageHome\r\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from 'yieldnyan-uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\nimport CakeStats from 'views/Home/components/CakeStats'\nimport PageHome from 'components/layout/PageHome'\n\nconst Hero = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n    width: 90%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <PageHome>\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\n          {TranslateString(576, 'YieldNyan')}\n        </Heading>\n        <Text>{TranslateString(578, 'Yield Farming on Binance Smart Chain with Lovely Nyan Cats.')}</Text>\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          {/* <LotteryCard /> */}\n          <CakeStats />\n        </Cards>\n        {/* <Cards>\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards> */}\n      </div>\n    </Page>\n    </PageHome>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}